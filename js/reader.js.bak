// JavaScript Document

function execute(instruction){
    //instruction in the form (value,register,command)
   
   if (!instruction){
        statoMacchina.running = false;
        return;
    }
    console.log(instruction);
    if (instruction[1]==null ||instruction[1]==''){
        
        instruction[1]='M';
    }
    if (instruction[2] == 'S'){
        console.log('stopping the machine');
        statoMacchina.running = false;
    }
    if (instruction[2] == 'print') {
        console.log('printing command');
        
		var destination = instruction[1];
            var dst = 'reg_' + destination;
            value = statoMacchina[dst];
			if (value==null){
				value=0;
			}
        if (instruction[1]=='slash') {
            stampa('<br>');
        }
        else if(instruction[1]=='M'){
		stampa(value + ' ' + '&#x25CA <br>');
		}
            else{
            stampa(value + ' ' + instruction[1] + ' &#x25CA <br>');
        }
		
    }
    if(instruction[2] == 'fromM' && instruction[1] == 'a'){
        console.log('Constant as instruction');
        statoMacchina.reg_M=instruction[0];
        printInstruction(instruction);
        codificaCostanti();
        
        
        
    }
    if (instruction[2] == 'fromM' && instruction[1]!= 'a') {
        console.log('fromM command');
        //constructing destination
        var destination = instruction[1];
        console.log("moving values from M to ", destination);
        var dst = 'reg_' + destination;
        //moving the value
        statoMacchina[dst] = statoMacchina.reg_M;
        
        
        //print
		if (instruction[1] == 'M' &&statoMacchina.resetM==false){
		stampa(statoMacchina.reg_M + ' ' + ' &#8593;<br>');	
		}
        else if(instruction[1] == 'M' && statoMacchina.resetM==true){
            stampa('&#8593;<br>');
        }
        else if(statoMacchina.resetM==true){
            stampa( instruction[1] + ' &#8593;<br>');
        }
        else {
        stampa(statoMacchina.reg_M + ' ' + instruction[1] + ' &#8593;<br>');
		}
        
    }
    if (instruction[2] == 'toA') {
        console.log('toA command');
        console.log("moving values to A from ", instruction[1]);
        
        var dst = 'reg_' + instruction[1];
        value = statoMacchina[dst];
		if (value==null){
				value=0;
			}
        statoMacchina.reg_A = value;
        if (instruction[1] == 'M'){
            stampa(value + ' &#8595;<br>');
        }
        else{
            stampa(instruction[1] + ' &#8595;<br>');
        }        
       
    }
    
    if (instruction[2] == 'sum') {
        console.log('sum');
        
		if(instruction[1] != 'M'){
            var dst = 'reg_' + instruction[1];
            console.log("moving values from ", dst, " to M");
            value = statoMacchina[dst];
			if (value==null){
				value=0;
			}
            statoMacchina.reg_M = value;
            stampa(instruction[1] + ' ' + '+<br>');		}
		else{
            stampa(statoMacchina.reg_M+' '+'+<br>');	
		}     
        var float_M = parseFloat(statoMacchina.reg_M);
        var float_A = parseFloat(statoMacchina.reg_A);
        console.log(float_A + '+' + float_M);
        var R = float_A + float_M;        
        A = (R).toFixed(statoMacchina.numberOfDecimals); //valore troncato
        storeInRegister(R, 'R');
        storeInRegister(A, 'A');
        
    }
    
   
    
    if (instruction[2] == 'sub') {
        console.log('subtract');		
		if(instruction[1]!='M'){		
            var dst = 'reg_' + instruction[1];
            console.log("moving values from ", dst, " to M");
            value = statoMacchina[dst];
			if (value==null){
				value=0;
			}
            statoMacchina.reg_M = value;
            stampa(instruction[1] + ' ' - '+<br>');
		}
		else{
            stampa(statoMacchina.reg_M+' '+'-<br>');	
		}		
        var M = statoMacchina.reg_M;
        var A = statoMacchina.reg_A;    
        var float_M = parseFloat(M)
        var float_A = parseFloat(A);    
        var R = float_A - float_M;	
        A = (R).toFixed(statoMacchina.numberOfDecimals); //valore troncato    
        storeInRegister(R, 'R');
        storeInRegister(A, 'A');
        
    }
	if (instruction[2] == 'mult') {
        console.log('mult');
		
		if(instruction[1]!='M'){		
            var dst = 'reg_' + instruction[1];
            console.log("moving values from ", dst, " to M");
            value = statoMacchina[dst];
			if (value==null){
				value=0;
			}
            statoMacchina.reg_M = value;
            stampa(instruction[1] + ' ' + 'X<br>');
		}
		else{
            stampa(statoMacchina.reg_M+' '+'X<br>');	
		}
		
        var M = statoMacchina.reg_M;
		if (M=='null'){
			M=0;
		}
        var A = statoMacchina.reg_A;    
        var float_M = parseFloat(M)
        var float_A = parseFloat(A);    
        console.log("adding values");
        var R = float_A * float_M;	
        A = (R).toFixed(statoMacchina.numberOfDecimals); //valore troncato    
        storeInRegister(R, 'R');
        storeInRegister(A, 'A');
        
    }
	if (instruction[2] == 'div') {
        console.log('division');
		
		if(instruction[1]!='M'){		
            var dst = 'reg_' + instruction[1];
            console.log("moving values from ", dst, " to M");
            value = statoMacchina[dst];
			if (value==null){
				value=0;
			}
            statoMacchina.reg_M = value;
            stampa(instruction[1] + ' ' + '&#x00F7<br>');
		}
		else{
            stampa(statoMacchina.reg_M+' '+'&#x00F7<br>');	
		}
		
        var M = statoMacchina.reg_M;
		if (M=='null'){
			M=0;
		}
        var A = statoMacchina.reg_A;    
        var float_M = parseFloat(M)
        var float_A = parseFloat(A);    
        console.log("adding values");
        var R = float_A / float_M;
        if (R === Infinity) { //=== no type conversion
        console.log("divisione per zero");
        turnOnRedLight();
    }		
        A = (R).toFixed(statoMacchina.numberOfDecimals); //valore troncato    
        storeInRegister(R, 'R');
        storeInRegister(A, 'A');
        
	}
					if (instruction[2] == 'sqrt') {
					console.log('radice');
					if(instruction[1]!='M'){		
							var dst = 'reg_' + instruction[1];
							console.log("moving values from ", dst, " to M");
							value = statoMacchina[dst];
							if (value==null){
								value=0;
							}
							statoMacchina.reg_M = value;
							stampa(instruction[1] + ' ' + '&#x221A<br>');
						}
						else{
							stampa('&#x221A<br>');	
						}
					var M = statoMacchina.reg_M;
					
					var float_M = parseFloat(M);
					
					console.log("square rooting");
					var R = Math.sqrt(float_M);
					var A = (R).toFixed(statoMacchina.numberOfDecimals); //inserire valore troncato in base alla rotella
					var M = 2*A;
					storeInRegister(R, 'R');
					storeInRegister(A, 'A');
					storeInRegister(M, 'M');
					
				}
if (instruction[2] == 'exchange'){
	
	if(instruction[1]=='slash'){
		
		var A=statoMacchina.reg_A;
		

		var dec_part=(A+"").split(".")[1];
        if(dec_part==null){
            dec_part=0;
        }
        else{
            dec_part='0.'+dec_part;
        }
		storeInRegister(dec_part, 'M');
        stampa('/'+' '+'&#x2195<br>');
		deselectRegisterBox();
            updateMachine();
            statoMacchina.resetM = true;
	 return;
	}
	 if(instruction[1]=='R'){
            console.log("puttin R in A");
            var R = statoMacchina.reg_R;
			storeInRegister(R, 'A');
			stampa(instruction[1] + ' ' + '&#x2195<br>');
			deselectRegisterBox();
            updateMachine();
            statoMacchina.resetM = true;
	 return;
	 }
	 
       if(instruction[1]=='A'){
            console.log("absolute value of A");
           var A = statoMacchina.reg_A;
           var abs_A = Math.abs(A);
            statoMacchina.reg_A = abs_A;
			stampa(instruction[1] + ' ' + '&#x2195<br>');
			deselectRegisterBox();
            updateMachine();
            statoMacchina.resetM = true;
	   return;}
        
            console.log("destination selected:"+dst);
            var destination = instruction[1];
            var dst = 'reg_' + destination;
            var A = statoMacchina.reg_A;
			
            var X = statoMacchina[dst];
			if (X==null){
				X=0;
			}
            
			storeInRegister(X, 'A');
            storeInRegister(A,destination);
            
			if(instruction[1]=='M'){
			stampa('&#x2195<br>');
			}
			else
			{
				stampa(instruction[1] + ' ' + '&#x2195<br>');
			}
	
}
    if (instruction[2] == 'clear'){
        var destination = instruction[1];
        var dst = "reg_" + destination;
        
        if (destination=='M' || destination==null){
            stampa('*<br>');
            return;
        }
        if (destination=='R'){
            stampa(instruction[1] + ' ' + '*<br>');
            return;
        }
        else{
            value = statoMacchina[dst];
                if (value==null){
                    value=0;
                }
            stampa(value+' ' + instruction[1] + ' ' + '*<br>');
            statoMacchina[dst] = null;
            
        }
	
    
    
    
    
}    
    //complete the command
    deselectRegisterBox();
    updateMachine();
    statoMacchina.resetM = true;
};


function runProgram() {
    n = localStorage.getItem('n');
    do {
        i = statoMacchina.currentInstruction;
        console.log(i);
        var instruction = localStorage.getItem('instruction'+i);
        if (instruction){
            instruction = instruction.split(',');
            execute(instruction);
            statoMacchina.currentInstruction++;
        }
        else{
            statoMacchina.running = false;
        }
    } while (statoMacchina.running);
}

function checkProgram() {
    var inst = localStorage.getItem('instruction0');
    instruction = inst.split(',');
    if (instruction[0] == 'AV'){
        console.log('condizione AV soddisfatta');
        return;
    }
    else {
        console.log(instruction[0]);
        alert('il programma deve iniziare con AV');
        statoMacchina.runnable = false;
        turnOnRedLight();
        return;
    }
}